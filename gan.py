"""
This program uses a generative adverserial neural network (gan), to create
digits that look like digits from the MNIST dataset.
Process:
    1) The discriminator is trained to distinguish a digit from the MNIST
        dataset, from a fake one, generated by a normal distribution.
    2) The generator creates digits from a normal distribution. Its output is
        given to the discriminator.
"""
import numpy as np
from sklearn.preprocessing import Normalizer

def get_normal_shaped_array(shape):
    """Returns a normal shaped array.

    The elements of the array follow a normal distribution and are between [0,1].
    Args:
        shape (tuple): The shape of the returned array.

    Returns:
        normal_shaped (np.array): Array with elements that are normal shaped.
    """
    normal = np.random.normal(size=shape)

    # sort from smallest to largest.
    normal = np.sort(normal, axis=0)

    min = np.amin(normal)

    # sets the smallest element to 0.
    new_normal = normal - min

    new_normal_max = np.amax(new_normal)

    # sets the largest element to 1.
    normal_shaped = new_normal / new_normal_max

    # set the first/last element wich are 0/1 to 0.0001/0.999 to make them
    # easier for an activation function like sigmoid.
    normal_shaped[0] = 1e-4
    normal_shaped[len(normal_shaped) - 1] = 0.999

    return normal_shaped

print(get_normal_shaped_array((20, 1)))
